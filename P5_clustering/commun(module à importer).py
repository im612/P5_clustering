# -*- coding: utf-8 -*-
"""Copie de P4-test-performance.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QZ-QyTBp_B9Ni1MkoZ1mhA6sPlR-ng4E
"""

#!/opt/anaconda3/bin/python3.9
#Inizializzazione
import pandas as pd

# from pandas import Series, DataFrame
import numpy as np
import scipy
import sys
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from scipy import stats
from scipy.stats import kstest, anderson, pearsonr, kurtosis
import math
import seaborn as sns
from sklearn import preprocessing
import datetime, os

from sklearn.cluster import KMeans
from sklearn.cluster import DBSCAN
from sklearn.cluster import AgglomerativeClustering

from sklearn.metrics import silhouette_samples, silhouette_score

import pickle

def mark_time(label):
    # now_ts = datetime.datetime.strptime("09-05-2022 10:00:00", "%d-%m-%Y %H:%M:%S")
    now_ts = datetime.datetime.now()
    print(label, now_ts)

def create_df_from_multiple_dfs(l_df, l_merge):
    n_joins = len(l_merge)
    print(n_joins)

    for j in range(n_joins):
        print('merge', j)
        col_merge_on = l_merge[j][2]
        print(l_merge[j], len(l_merge[j]))

        if j == 0:
            ind_df1 = l_merge[j][0][0]
            ind_df2 = l_merge[j][1][0]
            print('ind_df1', ind_df1, 'ind_df2', ind_df2)
            df1 = l_df[ind_df1]
            print('df1 = l_df[%s]' % ind_df1)
            df2 = l_df[ind_df2]

            df1.dropna(axis=0, subset=[col_merge_on])
            df1[col_merge_on].astype(str)
            df2.dropna(axis=0, subset=[col_merge_on])
            df2[col_merge_on].astype(str)
            df1 = pd.merge(df1[l_merge[j][0][1]], df2[l_merge[j][1][1]], how='inner', on=col_merge_on)

        else:
            ind_df2 = l_merge[j][1][0]
            df2 = l_df[ind_df2]

            df1.dropna(axis=0, subset=[col_merge_on])
            df1[col_merge_on].astype(str)
            df2.dropna(axis=0, subset=[col_merge_on])
            df2[col_merge_on].astype(str)

            df1 = pd.DataFrame(
                pd.merge(df1, df2[l_merge[j][1][1]], how='inner', on=col_merge_on, suffixes=('_l', '_r')))

    return df1

#1. Importation des dataframes
df_clean_rfm = pd.read_csv("data/df_olist_clean_rfm.csv", sep=',')
df_olist_clean = pd.read_csv("data/df_olist_clean.csv", sep=',')
# df_olist_clean_all = pd.read_csv("data/df_olist_clean_all.csv", sep=',')
df_olist_clean_all = pd.read_csv("data/df_olist_clean_all_new.csv", sep=',')
# df_olist_clean_seuil_3000 = pd.read_csv("data/df_olist_clean_seuil_3000.csv", sep=',')
df_olist_clean_seuil_3000 = pd.read_csv("data/df_olist_clean_seuil_3000_new.csv", sep=',')
df_olist_clean_seuil_6000 = pd.read_csv("data/df_olist_clean_seuil_tot_6000.csv", sep=',')
df_s_outliers_3000_only = pd.read_csv("data/df_olist_clean_outliers_3000_only.csv", sep=',')

# df_olist_clean_all = pd.read_csv("data/df_olist_clean_all_sample.csv", sep=',')
print(df_olist_clean_all.columns)


# Création de la classe Feature, qui permettra de traiter les features comme des objets
class Feature:
    # Dataframe d'origine
    def set_df(self, df):
        self.df = df

    def get_df(self):
        return self.df

    # Nom du dataframe d'origine. Utile comme etiquette.
    def set_dfname(self, dfname):
        self.dfname = dfname

    def get_dfname(self):
        return self.dfname

    # Nom de la feature associée à l'istance
    def set_name(self, name):
        self.name = name

    def get_name(self):
        return self.name

    # Nom de la feature associée à l'istance avec le df marque
    def set_fullname(self, fullname):
        self.fullname = fullname

    def get_fullname(self):
        return self.fullname

    def which_feature_am_i(self):
        inst_def='Cette instance %s est associée à la feature %s du jeu de données %s, colonne (%s)' % (self, )
        return()

    def show_beginning(self, df, feat):
        print(df[feat].head())

    def create_df_for_hist(self):
        df_for_hist_pie = self.df.groupby([self.namefeat]).count().sort_values(by=self.namefeat, ascending='True').iloc[:, 1]
        df_for_hist_pie2 = df_for_hist_pie.fillna(0)
        return df_for_hist_pie2


# CRÉATION DES INSTANCES FEATURES
#################################
#################################
#################################
#################################


def create_features_instances(ind, feat_list):
    #le nom de l'instance est pris de feat_list
    list_of_instances = [Feature() for i in feat_list]

    for i in list_of_instances:
        i.set_df(df_sources[ind][0])
        i.set_dfname(df_sources[ind][1])
        i.set_fullname('%s_%s' % (feat_list[list_of_instances.index(i)], df_sources[ind][1]) )
        i.set_name(feat_list[list_of_instances.index(i)])
        # print(i.get_fullname())

    return list_of_instances

# list_of_feature_names_olist = ['customer_unique_id', 'orders', 'payment_value', 'review_score', 'recency_order_purchase_timestamp', 'recency_crescent', 'attente-jours', 'decalage-prevision-jours', 'rapidite_livraison']
list_of_feature_names_olist = ['customer_id', 'customer_unique_id', 'order_status',
       'order_purchase_timestamp', 'order_delivered_carrier_date',
       'order_estimated_delivery_date', 'review_score', 'livree',
       'recency_order_purchase_timestamp',
       'recency_order_delivered_carrier_date',
       'recency_order_estimated_delivery_date', 'attente', 'attente-jours',
       'decalage-prevision', 'decalage-prevision-jours', 'rapidite_livraison',
       'recency_crescent', 'payment_value', 'orders']
df_sources = [ [df_olist_clean_all, 'df_olist_clean_all'], [df_olist_clean_seuil_3000, 'df_olist_clean_seuil_3000'], [df_olist_clean_seuil_6000, 'df_olist_clean_seuil_tot_6000'], [df_s_outliers_3000_only, 'df_s_outliers_3000_only'] ]


def create_instances_for_all_series():
    l = []
    list_of_instances_olist_all = create_features_instances(0, list_of_feature_names_olist)
    l.append(list_of_instances_olist_all)
    list_of_instances_olist_3000 = create_features_instances(1, list_of_feature_names_olist) ###QUI IL NUMERO È IMPORTANTISSIMO
    l.append(list_of_instances_olist_3000)

    list_of_instances_olist_6000 = create_features_instances(2, list_of_feature_names_olist)  ###QUI IL NUMERO È IMPORTANTISSIMO
    l.append(list_of_instances_olist_6000)

    list_of_instances_outliers_3000_only = create_features_instances(3, list_of_feature_names_olist)
    l.append(list_of_instances_outliers_3000_only)

    return l

list_of_instances_olist = create_instances_for_all_series()

# Fonction de création et de normalisation des matrices du modèle
def create_x_matrix(l_colnames):
    df = l_colnames[1]  # nom du dataframe à utiliser
    lista_nomi_colonne_per_matrice_x_matrix = l_colnames[0]
    print('lista_nomi_colonne_per_matrice_x_matrix = l_colnames[0]', l_colnames[0])

    for i in l_l_instances:
        print('i[0]', i[0])
        if df == i[0]:  # 1. Si le nom du df coincide...
            l_instances_a_utiliser = i[1]  # on a identifié la bonne liste des instances
            print(l_instances_a_utiliser)
            l_tmp = l_instances_a_utiliser[0].df.shape[0]  # nombre de valeurs pour l'initialisation de tmp
            print(l_tmp)
            l_ind_x_previsto = len(l_colnames[0])
            break
        else:
            print('%s not found' % i)

    tmp = np.empty(l_tmp, dtype=object).reshape(l_tmp, 1)
    # print(tmp[:5])
    inst_x = []
    l_ind_x_incr = 0
    order_features = []

    num_cols_x_matrix = len(lista_nomi_colonne_per_matrice_x_matrix)
    for i in lista_nomi_colonne_per_matrice_x_matrix:  # 2. Dentro la lista delle istanze ...
        for j in l_instances_a_utiliser:  # ... per ciascuna colonna da trovare
            if i == j.name:  # se il nome della colonna dentro la lista delle istanze coincide...
                print(i, 'found')
                l_ind_x_incr += 1
                inst_x.append(j)
                print(inst_x, j.name)
                # print(df[j.name], j.df[j.name])
                # x = j.df[j.name].to_numpy()#ma ha sempre funzionato
                df = j.df
                print(df.columns)
                x = df[j.name].to_numpy()
                x = x.reshape(x.shape[0], 1)
                order_features.append(j.name)
                if l_ind_x_incr != 1:
                    print("\nind %i" % l_ind_x_incr)
                    print("tmp.shape prima: %s" % str(tmp.shape))
                    tmp = np.hstack([tmp, x])
                    print("tmp.shape dopo: %s" % str(tmp.shape))
                    # print(tmp[:5])
                else:
                    print("TMP tmp.shape prima: %s" % str(tmp.shape))
                    tmp = x
                    print("tmp.shape dopo: %s" % str(tmp.shape))
                    # print(tmp[:5])
                    # print(tmp[:5][:5])
            else:
                print('%s not found' % i)
                # break

    print('Finished with order:', order_features)

    if order_features != lista_nomi_colonne_per_matrice_x_matrix:
        print('Real order is %s but you asked for %s' % (order_features, lista_nomi_colonne_per_matrice_x_matrix))
    else:
        print('Right sequence!\nReal order is\n%s\nVS\n%s\nwhich is what you supplied.\n' % (
            order_features, lista_nomi_colonne_per_matrice_x_matrix))

    x_matrix = tmp
    print("x_matrix.shape: %s" % str(x_matrix.shape))

    if len(inst_x) != num_cols_x_matrix:
        print("%i != %i" % (len(inst_x), num_cols_x_matrix))
        return

    x_matrix = pd.DataFrame(x_matrix).dropna().to_numpy()

    print('Final shape:', x_matrix.shape)

    return x_matrix

def mark_time(label):
    # now_ts = datetime.datetime.strptime("09-05-2022 10:00:00", "%d-%m-%Y %H:%M:%S")
    now_ts = datetime.datetime.now()
    print(label, now_ts)

########### VARIABLES ###########

# folders_name = [0, '22-5-1-rfm', '22-5-2-5features', '26-5-2-5features', '27-5-2-5features', '27-5-2-rfm', '40_3_6_quatre_vars', '40-6-6-1-3000-rfm', '40-6-6-2-3000-5features', '40-6-6-3-3000-4features', '40-6-6-1-6000-rfm', '40-6-6-2-6000-5features', '40-6-6-3-6000-4features']
# folders_name = [0, '27-5-2-rfm', '27-5-2-5features', '40_3_6_quatre_vars', '40-6-6-1-3000-rfm', '40-6-6-2-3000-5features', '40-6-6-3-3000-4features', '40-6-6-1-6000-rfm', '40-6-6-2-6000-5features', '40-6-6-3-6000-4features', '0']
folders_name = [0, '27-5-2-rfm', '27-5-2-5features', '40_3_6_quatre_vars', '40-6-6-1-3000-rfm', '40-6-6-2-3000-5features', '40-6-6-3-3000-4features', '0']

# Création des modèles
# Association du nom du dataframe et de la liste des instances
# l_l_instances = [['df_olist_clean_all', list_of_instances_olist[0]], ['df_olist_clean_seuil_3000', list_of_instances_olist[1]], ['df_olist_clean_seuil_6000', list_of_instances_olist[2]]]
l_l_instances = [['df_olist_clean_all', list_of_instances_olist[0]], ['df_olist_clean_seuil_3000', list_of_instances_olist[1]], ['df_s_outliers_3000_only', list_of_instances_olist[3]]]
#

modeles_lineaires1 = [[['orders', 'payment_value', 'recency_crescent'], 'df_olist_clean_all', '27-5-2-rfm', ['       orders', 'payment_value', 'recency_crescent']],
                      [['orders', 'payment_value', 'review_score', 'rapidite_livraison', 'recency_crescent' ], 'df_olist_clean_all', '27-5-2-5features',  '', [        'orders', 'payment_value', 'review_score', 'rapidite_livraison', 'recency_crescent' ]],
                      [['payment_value', 'review_score', 'rapidite_livraison', 'recency_crescent'], 'df_olist_clean_all', '40_3_6_quatre_vars', '', [        'payment_value', 'review_score', 'rapidite_livraison', 'recency_crescent' ]]
                      ]

modeles_lineaires2 = [[['orders', 'payment_value', 'recency_crescent'], 'df_olist_clean_seuil_3000', '40-6-6-1-3000-rfm', ['       orders', 'payment_value', 'recency_crescent']],
                      [['orders', 'payment_value', 'review_score', 'rapidite_livraison', 'recency_crescent' ], 'df_olist_clean_seuil_3000', '40-6-6-2-3000-5features', [        'orders', 'payment_value', 'review_score', 'rapidite_livraison', 'recency_crescent' ],],
                      [['payment_value', 'review_score', 'rapidite_livraison', 'recency_crescent'], 'df_olist_clean_seuil_3000', '40-6-6-3-3000-4features', [        'payment_value', 'review_score', 'rapidite_livraison', 'recency_crescent' ]]
                      ]

modeles_lineaires3 = [[['orders', 'payment_value', 'recency_crescent'], 'df_olist_clean_seuil_6000', '40-6-6-1-6000-rfm', ['       orders', 'payment_value', 'recency_crescent']],
                      [['orders', 'payment_value', 'review_score', 'rapidite_livraison', 'recency_crescent' ], 'df_olist_clean_seuil_6000', '40-6-6-2-6000-5features', [        'orders', 'payment_value', 'review_score', 'rapidite_livraison', 'recency_crescent' ],],
                      [['payment_value', 'review_score', 'rapidite_livraison', 'recency_crescent'], 'df_olist_clean_seuil_6000', '40-6-6-3-6000-4features', [        'payment_value', 'review_score', 'rapidite_livraison', 'recency_crescent' ]]
                      ]

# liste_modeles = (modeles_lineaires1 + modeles_lineaires2 + modeles_lineaires2)
liste_modeles = (modeles_lineaires1 + modeles_lineaires2)

